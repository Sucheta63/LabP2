def knapSack(W, wt, val, n):

	# Base Case
	if n == 0 or W == 0:
		return 0
	if (wt[n-1] > W):
		return knapSack(W, wt, val, n-1)
	else:
		return max(
			val[n-1] + knapSack(
				W-wt[n-1], wt, val, n-1),
			knapSack(W, wt, val, n-1))

# end of function knapSack
#Driver Code
if '__main__' == __name__:
    val = input('Enter the values of the item(s) in order: ').split()
    val = [int(v) for v in val] # 60 100 120
    wt = input('Enter the positive weights of the item(s) in order: ').split()
    wt = [int(w) for w in wt] # 10 20 30
    W = int(input('Enter the maximum capacity of the knapsack: ')) # 50
    n = len(val)
    print(knapSack(W, wt, val, n))
#analysis 
- TC =O(N*W( 
	- n = no. of items 
	- w = capacity of knapsack 
recursive DP approach is used 
10 20 30 //weights
60 100 120 //value
w = 50 
n=3
