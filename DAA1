# Program to display the Fibonacci sequence up to n-th term
nterms = int(input("Enter number of terms "))
# first two terms
n1, n2 = 0, 1
count = 0
# check if the number of terms is valid
if nterms <= 0:
   print("Please enter a positive integer")
# if there is only one term, return n1
elif nterms == 1:
   print("Fibonacci sequence upto", nterms,":")
   print(n1)
# generate fibonacci sequence
else:
   print("Fibonacci sequence:")
   while count < nterms:
       print(n1)
       nth = n1 + n2
       # update values
       n1 = n2
       n2 = nth
       count += 1




# Python program to display the Fibonacci sequence

def recur_fibo(n):
   if n <= 1:
       return n
   else:
       return(recur_fibo(n-1) + recur_fibo(n-2))

nterms = int(input("Enter the number of terms "))

# check if the number of terms is valid
if nterms <= 0:
   print("Plese enter a positive integer")
else:
   print("Fibonacci sequence:")
   for i in range(nterms):
       print(recur_fibo(i))


#analysis : 
In case of recursion the solution take exponential time, 
that can be explained by the fact that the size of the tree exponentially 
grows when n increases. So for every additional element in the Fibonacci 
sequence we get an increase in function calls. Big O in this case is equal 
to O(2^n). Exponential Time complexity denotes an algorithm whose growth doubles 
with each addition to the input data set.

An algorithm in our iterative solution takes linear time to complete the task.
Basically we iterate through the loop n-2 times, so Big O (notation used to
describe our worst case scenario) would be simply equal to O(n) in this case. 
The space complexity is O(n)
